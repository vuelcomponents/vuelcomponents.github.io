
<section class="w-[800px]">
   <VuelCalendar :vuelCalendarOptions="vuelCalendarOptions" :colors="colors"></VuelCalendar>
</section>
/*
    If you enforce height through styling, you must also set overflow!!.
                                                                             */
    <section class="w-[800px] max-h[600px] overflow-auto"> ... </section>
/*
    This prevents your document from expanding, allowing the calendar to be extendable downwards.
    However, remember!
    You must set the maximum height equal to the height parameter for the calendarOptions object.
    This is crucial for the correct functioning of the calendar.
                                                                             */

/*
    Copy & Paste Calendar Options Object
                                           */

const calendarApi = ref<IVuelCalendarApi | undefined>(undefined);

const vuelCalendarOptions = ref<IVuelCalendarOptions>({
     /* The initial height of the calendar*/
    height:600,
    /* 'dark' and 'light' theme available */
    theme:'dark',
    /* Define the first day being displayed on the calendar */
    startDate:new Date(),
     /* Minimum 1, this parameter defines how many days after the start day should be displayed */
    daysForward:5,
    /* Minimum 0, Max 23, define time from 'startHour' to 23:59 */
    startHour:17,
    /* Minimum 1, Max 24, Must be greater than startHour */
    endHour:24,
     /* example vue component to use as renderer for event container (read about Renderers below)*/
    renderer:'ExampleRender',
    /* set if you want to implement draggable events -> onEventDropped(drop:VuelCalendarDrop) -< then implement this method to catch dropped events on timeline */
    draggableEvents:true,
    /* set if you want to implement resizable events -> onEventStartResized(resized:VuelCalendarResize); onEventEndResized(resized:VuelCalendarResize); -< then implement these methods to operate on resized events on timeline */
    resizableEvents:true,
    /* a function being resolved, after calendar Api is ready */
    onVuelCalendarApiReady: (api: IVuelCalendarApi) => {
        calendarApi.value = api;
        api.setEvents([
            {
                id: 1,
                label: 'Event #1',
                data: {},
                start: new Date(new Date().setHours(8, 0)),
                end: new Date(new Date().setHours(23, 0)),
            },
        ]); /* after API is ready you can set new Events to the calendar */
    },
    onDayClicked:(day:VuelCalendarDay)=>
    {
        /* The function returns the day that was clicked, along with the time and date on the timeline, as well as the events that belong to this day.*/
    },
    onDayDblClicked:(day:VuelCalendarDay)=>
    {
        /* The function returns the day that was double clicked, along with the time and date on the timeline, as well as the events that belong to this day.*/
    },
    onEventClicked:(event:VuelCalendarEvent)=>
    {
        /* The function returns the event that was clicked, along with the time and date of start and end, as well as the data:any that belong to this event.*/
    },
    onEventDropped:(dropped:VuelCalendarDrop)=>
    {
        /* property draggableEvents must be set to true in VuelCalendarOptions */
        /* The function returns the drop object(VuelCalendarEvent&VuelCalendarDay&MousEvent) that was being dragged, along with the time and date on timeline.*/
        /* additional functions are included : dropped.decline() & dropped.accept()
    },
    onEventStartResized:(resized:VuelCalendarResize)=>
    {
        /* property resizableEvents must be set to true in VuelCalendarOptions */
        /* Event returns the resize object that was being resized, along with old and new start datetime. */
        /* additional functions are included : resized.decline() & resized.accept()
    },
});

/*
             Custom Colors Object
                                           */

type Colors = {
    surface?:string;
    primary?:string
    event?:string
    highlight?:string
    textPrimary?:string
    menuBg?:string,
    dragging?:string,
}